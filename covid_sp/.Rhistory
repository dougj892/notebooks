`fdx_Has a national identity card (% age 15+)`,
`fdx_Mobile money account (% age 15+)`,
`fdx_Mobile money account, rural  (% age 15+)`,
ifc_i_branches_A1_km2,
ifc_i_branches_A2_km2,
ifc_i_branches_A3B1a_km2,
ifc_i_branches_A1_pop,
ifc_i_branches_A2_pop,
ifc_i_branches_A3B1a_pop,
ifc_i_ATMs_km2,
ifc_i_ATMs_pop,
ifc_i_mob_agent_active_pop,
ifc_i_mob_agent_active_km2,
ifc_i_mob_agent_registered_pop,
ifc_i_mob_agent_registered_km2,
ifc_i_nonbranch_A1_km2,
ifc_i_nonbranch_A1_pop,
region,
income_level)
fdx_fas <- fdx_fas %>% transmute(country.x, ccode,
has_account = `fdx_Account (% age 15+)`,
`fdx_Account, rural (% age 15+)`,
`fdx_No account because financial institutions are too far away (% age 15+)`,
`fdx_Sent or received domestic remittances in the past year (% age 15+)`,
`fdx_Sent or received domestic remittances in the past year, rural  (% age 15+)`,
`fdx_Has a national identity card (% age 15+)`,
`fdx_Mobile money account (% age 15+)`,
`fdx_Mobile money account, rural  (% age 15+)`,
ifc_i_branches_A1_km2,
ifc_i_branches_A2_km2,
ifc_i_branches_A3B1a_km2,
ifc_i_branches_A1_pop,
ifc_i_branches_A2_pop,
ifc_i_branches_A3B1a_pop,
ifc_i_ATMs_km2,
ifc_i_ATMs_pop,
ifc_i_mob_agent_active_pop,
ifc_i_mob_agent_active_km2,
ifc_i_mob_agent_registered_pop,
ifc_i_mob_agent_registered_km2,
ifc_i_nonbranch_A1_km2,
ifc_i_nonbranch_A1_pop,
region,
income_level)
covsp <- read_csv(file.path(path, "ugo_april_10_clean.csv"))
fdx_fas <- read_xlsx(file.path(path, "fdx_fas_latest.xlsx"))
fdx_fas <- fdx_fas %>% transmute(country.x, ccode,
has_account = `fdx_Account (% age 15+)`,
has_id = `fdx_Has a national identity card (% age 15+)`,
has_mobile = `fdx_Mobile money account (% age 15+)`,
bank_branches = ifc_i_branches_A1_pop,
coop_branches = ifc_i_branches_A2_pop,
mf_branches = ifc_i_branches_A3B1a_pop,
atms = ifc_i_ATMs_pop,
mobile_agents = ifc_i_mob_agent_active_pop,
bank_agents = ifc_i_nonbranch_A1_pop,
region,
income_level)
# filter for useful variables in the FDX, FAS dataset
# covsp <- covsp %>% inner_join(fdx_fas, by = "ccode")
View(covsp)
table(covsp$simp_type)
length(unique)(covsp$simp_type)
length(unique(covsp$simp_type))
cov_long <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n)
View(cov_long)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n) %>%
replace_na(colnames = 0)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n) %>%
replace_na(0)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n)
View(covsp)
View(cov_wide)
ncol(cov_wide)
replace_na(3:ncol(cov_wide), 0)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n) %>%
replace_na(3:ncol(cov_wide), 0)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n) %>%
replace(is.na(.) 0)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n) %>%
replace(is.na(.), 0)
View(cov_wide)
merged <- cov_wide %>% inner_join(fdx_fas)
View(merged)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n)
merged <- cov_wide %>% inner_join(fdx_fas) %>%
replace(is.na(.), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate((is.numeric & is.na), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate_at((is.numeric & is.na), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate_at((~(is.numeric(.x) & is.na(.x)), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate_at(~(is.numeric(.x) & is.na(.x)), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate_if(~(is.numeric(.x) & is.na(.x)), 0)
merged <- cov_wide %>% inner_join(fdx_fas) %>%
mutate_if(is.numeric, funs(if_else(is.na(.), 0, .)))
fdx
fdx_fas
glimpse(fdx_fas)
merged[is.na(merged)] <- 0
?mutate_if
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n)
merged <- cov_wide %>% inner_join(fdx_fas) %>% mutate_if(is.numeric , replace_na, replace = 0)
merged[is.na(merged)] <- 0
View(merged)
merged %>% filter(is.na(income_level))
merged <- cov_wide %>%
inner_join(fdx_fas) %>%
mutate_if(is.numeric , replace_na, replace = 0) %>%
filter(!is.na(income_level))
View(merged)
merged %>% group_by(income_level) %>% summarize_all(mean)
is.numer(cov_wide)
is.numeric(cov_wide)
map(cov_wide, is_numeric)
map_lgl(cov_wide, is_numeric)
merged %>% group_by(income_level) %>% summarize_all(mean)
library(tidyverse)
library(readxl)
path <- "C:/Users/dougj/Dropbox/Covid Social Protection/Data/Clean"
covsp <- read_csv(file.path(path, "ugo_april_10_clean.csv"))
fdx_fas <- read_xlsx(file.path(path, "fdx_fas_latest.xlsx"))
# filter for useful variables in the FDX, FAS dataset
fdx_fas <- fdx_fas %>% transmute(country.x, ccode,
has_account = `fdx_Account (% age 15+)`,
has_id = `fdx_Has a national identity card (% age 15+)`,
has_mobile = `fdx_Mobile money account (% age 15+)`,
bank_branches = ifc_i_branches_A1_pop,
coop_branches = ifc_i_branches_A2_pop,
mf_branches = ifc_i_branches_A3B1a_pop,
atms = ifc_i_ATMs_pop,
mobile_agents = ifc_i_mob_agent_active_pop,
bank_agents = ifc_i_nonbranch_A1_pop,
region,
income_level)
cov_wide <- covsp %>%
count(ccode, simp_type) %>%
pivot_wider(names_from = "simp_type", values_from = n)
merged <- cov_wide %>%
inner_join(fdx_fas) %>%
mutate_if(is.numeric , replace_na, replace = 0) %>%
filter(!is.na(income_level))
merged %>% group_by(income_level) %>% summarize_all(mean)
View(merged)
View(covsp)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
attributes(merged$income_level)
attributes(merged$ifc_i_branches_A1_pop)
t <- merged %>% rename(ifc_i_branches_A1_pop = "new")
t <- merged %>% rename(new = ifc_i_branches_A1_pop )
str(t)
t
glimpse
glimpse(t)
t <- merged %>% rename(attributes(ifc_i_branches_A1_pop)$label = ifc_i_branches_A1_pop)
t <- merged %>% rename(paste(attributes(ifc_i_branches_A1_pop)$label) = ifc_i_branches_A1_pop)
# rename the ifc variables using their label
get_label <- function(x) attrbitues(x)$label
current_names <- colnames(merged)
labels <- map(merged, get_label)
# rename the ifc variables using their label
get_label <- function(x) attributes(x)$label
current_names <- colnames(merged)
labels <- map(merged, get_label)
labels
labels <- map_chr(merged, get_label)
library(rlang)
as_string(x)
as_string(merged$country)
# rename the ifc variables using their label
get_label <- function(x) attributes(x)$label
current_names <- colnames(merged)
labels <- map_chr(merged, get_label)
labels <- map(merged, get_label)
labels
# rename the ifc variables using their label
get_label <- function(x) attributes(x)$label
safe_get <- safely(get_label)
current_names <- colnames(merged)
labels <- map_chr(merged, safe_get)
t <- attributes(merged$ifc_i_branches_A1_pop)$label
class(t)
t
t[[1]]
# rename the ifc variables using their label
get_label <- function(x) attributes(x)$label[[1]]
safe_get <- safely(get_label)
current_names <- colnames(merged)
labels <- map_chr(merged, safe_get)
# Create consolidated country dataset of findex, aspire, and aspire data
# Load libraries and set paths
library(tidyverse)
library(haven)
library(readxl)
library(writexl)
data_path <- "C:/Users/dougj/Dropbox/Covid Social Protection/Data"
############# PROCESS IFC FAS DATASET ################
ifc <- read_dta(file.path(data_path, "Raw", "IFC FAS data.dta"))
# Add "ifc" prefix to all column names and then change a few back
colnames(ifc) <- paste("ifc_", colnames(ifc), sep ="")
ifc <- ifc %>% rename(year = ifc_year, country = ifc_economy, ccode = ifc_iso3)
# The dataset has data for multiple years. Just get the most recent year.
ifc_latest <- ifc %>% filter(year == 2018)
# Create function to test whether there are any non-NA values in a vector.  Will use this to filter for
# variables that have at least one non-missing
all_na <- function(x) any(!is.na(x))
ifc_latest <- ifc_latest %>% select_if(all_na)
###### THE NEXT 10 OR SO LINES DETERMINES MOST RECENT YEAR OF NON-MISSING DATA
###### SEEMS LIKE IT IS 2018 FOR MOST VARIABLES SO OK TO JUST USE 2018
# convert all of the columns to numeric so I can pivot the data
# ifc[4:ncol(ifc)] <- sapply(ifc[4:ncol(ifc)], as.numeric)
#
# # Look at whether I should not just take the latest year for this data
# latest_year <- ifc %>%
#   select(-country) %>%
#   pivot_longer(-c("ccode", "year"), names_to = "var", values_to = "value") %>%
#   filter(!is.na(value)) %>%
#   group_by(ccode, var) %>%
#   summarise(latest = max(year))
############# PROCESS FINDEX DATASET ################
findex <- read_excel(file.path(data_path, "Raw", "Global Findex Database.xlsx"))
# Add "fdx" prefix to all column names and then change a few back
colnames(findex) <- paste("fdx_", colnames(findex), sep ="")
findex <- findex %>% rename(year = fdx_...1,
ccode = fdx_...2,
country = fdx_...3,
region = fdx_...4,
income_level = fdx_...5)
# select on year 2017 (the most recent year), add "fdx" predix to var names, and then change some names back
findex_latest <- findex %>%  filter(year == 2017)
# drop any columns that are all na
findex_latest <- findex_latest %>% select_if(all_na)
###### MERGE JUST FINDEX AND IFC #########
merged <- ifc_latest %>%
full_join(findex_latest, by = "ccode")
View(findex)
t <- str_subset(colname(findex), "wage")
t <- str_subset(colnames(findex), "wage")
t
t <- str_subset(colnames(findex), "salary")
t
source('~/code/notebooks/covid_sp/import and explore ASPIRE.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import and explore ASPIRE.R', echo=TRUE)
View(aspire_long)
aspire <- read_csv(file.path(data_path, "ASPIREData.csv"))
View(aspire)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(1:4, 2016)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(1:4, `2016``)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(1:4, `2016`)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2016`)
View(aspire_nna)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2016`) %>% filter(!is.na(`2016`))
View(aspire_nna)
table(aspire_nna$`2016`)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2014`) %>% filter(!is.na(`2016`))
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2014`) %>% filter(!is.na(`2014`))
View(aspire_nna)
View(aspire_nna)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2014`) %>% filter(!is.na(`2014`) & (`2014` != FALSE))
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2016`) %>% filter(!is.na(`2016`) & (`2016` != FALSE))
View(aspire)
# just keep 2016 and variables for that year which are not missing
aspire_nna <- aspire %>% select(!!c(1:4), `2015`) %>% filter(!is.na(`2015`) & (`2015` != FALSE))
# just count the number of non-null values for each year
aspire %>% summarize_all(.funs = is.na)
# just count the number of non-null values for each year
aspire %>% summarize_all(.funs = function (x) sum(is.na(x)))
# just count the number of non-null values for each year
aspire %>% summarize_all(.funs = function (x) sum(!is.na(x)))
# just count the number of non-null values for each year
t <- aspire %>% summarize_all(.funs = function (x) sum(!is.na(x)))
View(t)
# just count the number of non-null values for each year
t <- aspire %>% summarize_all(.funs = function (x) sum(!is.na(x) & (x != FALSE)))
View(t)
View(t)
View(aspire)
?read_csv
t <- aspire <- filter(country == "Afghanistan")
t <- aspire <- filter(`Country Name` == "Afghanistan")
glimpse(aspire)
t <- aspire <- filter(`Country Name` == "Afghanistan")
colnames(aspire)[1] <- "country"
t <- aspire <- filter(country == "Afghanistan")
t <- aspire %>%  filter(country == "Afghanistan")
View(t)
colnames(aspire)[3] <- "indicator"
t <- aspire %>%  filter(indicator == "per_pr_allpr.adq_pop_tot")
colnames(aspire)[4] <- "ind_code"
t <- aspire <- filter((country == "Afghanistan") & (ind_code == "per_pr_allpr.adq_pop_tot")
)
t <- aspire %>%  filter((country == "Afghanistan") & (ind_code == "per_pr_allpr.adq_pop_tot")
)
View(t)
View(aspire)
# just count the number of non-null values for each year --> for some reason read_csv isn't reading this data correctly
aspire %>% summarize_all(.funs = function (x) sum(!is.na(x) & (x != FALSE)))
aspire <- read_csv(file.path(data_path, "ASPIREData.csv"))
aspire <- read_xlsx(file.path(data_path, "Aspire data.xlsx"))
ilo <- read_csv(file.path(data_path, "ilostat-2020-04-17.csv"))
table(ilo$classif1.label)
View(ilo)
View(ilo)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>% mutate(ccode = str_sub(source.label, 1,3))
View(ilo_slim)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label)
View(ilo_slim)
View(ilo)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label) %>% rename(country = ref_area.label))
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label) %>% rename(country = ref_area.label)
View(ilo_slim)
View(ilo)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label) %>%
rename(country = ref_area.label, indicator = classif1.label)
View(ilo_slim)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label) %>%
rename(country = ref_area.label, indicator = classif1.label, value = obs_value)
View(ilo_slim)
table(ilo_slim$indicator)
# just take the most interesting indicators for all population
ilo_slim <- ilo %>% filter(str_detect(sex.label, "Total")) %>%
mutate(ccode = str_sub(source.label, 1,3)) %>%
select(-indicator.label, -source.label, -sex.label) %>%
rename(country = ref_area.label, indicator = classif1.label, value = obs_value) %>%
filter(str_detect(indicator, "Poor persons") | str_detect(indicator, "Population covered") | str_detect(indicator, "Vulnerable"))
View(ilo_slim)
ilo_slim <- ilo_slim %>% case_when(
str_detect(indicator, "Poor persons") ~ "sp_cover_poor",
str_detect(indicator, "Population covered") ~ "sp_cover_all",
str_detect(indicator, "Vulnerable") ~ "sa_cover_vulnerable")
ilo_slim <- ilo_slim %>% case_when(
str_detect(indicator, "Poor persons") ~ "sp_cover_poor",
str_detect(indicator, "Population covered") ~ "sp_cover_all",
str_detect(indicator, "Vulnerable") ~ "sa_cover_vulnerable")
ilo_slim <- ilo_slim %>% mutate(ind = case_when(
str_detect(indicator, "Poor persons") ~ "sp_cover_poor",
str_detect(indicator, "Population covered") ~ "sp_cover_all",
str_detect(indicator, "Vulnerable") ~ "sa_cover_vulnerable"))
View(ilo_slim)
# Save the merged dataset as an R
write_xlsx(merged, path =file.path(data_path, "Clean", "fdx_fas_latest.xlsx")) %>% select(-indicator)
str_detect(indicator, "Poor persons") ~ "sp_cover_poor",
str_detect(indicator, "Population covered") ~ "sp_cover_all",
str_detect(indicator, "Vulnerable") ~ "sa_cover_vulnerable")) %>%
select(-indicator)
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
View(ilo_slim)
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
View(ilo_slim)
glimpse(ilo_slim)
ilo_slim %>% count(ccode)
ilo_slim %>% count(ccode) %>% print(100)
ilo_slim %>% count(ccode) %>% print(n=100)
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n()
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_1()
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1)
View(ilo_latest)
ilo_latest %>% count(country)
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(country) %>% arrange(desc(n))
View(ilo_latest)
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(country) %>% arrange(desc(n))
ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year))
t <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year))
View(t)
View(t)
t <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year))
t <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year))
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1)
ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1) %>% print(n=100)
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1)
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(n=1) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(1) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>% arrange(desc(year))
View(ilo_latest)
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% ungroup() %>% group_by(ccode, ind) %>% arrange(desc(year)) %>% top_n(1) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
# get the most recent year for each of the indicators
ilo_latest <- ilo_slim %>% group_by(ccode, ind) %>%  top_n(n=1, -year) %>% ungroup()
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n))
# check that no countries have more than 3 rows
ilo_latest %>% count(ccode) %>% arrange(desc(n)) %>% count(n)
View(ilo_latest)
# check if the most recent year varies by country
ilo_latest %>% count(country, year) %>% count(n)
# check if the most recent year varies by country
ilo_latest %>% count(country, year)
# check if the most recent year varies by country
ilo_latest %>% count(country, year) %>% count(country) %>% count(n)
# check if the most recent year varies by country -->
ilo_latest %>% count(country, year) %>% count(country)
# check if the most recent year varies by country -->
ilo_latest %>% count(country, year) %>% count(country) %>% arrange(desc(n))
View(ilo_slim)
View(ilo_latest)
View(ilo_latest)
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
View(ilo_wide)
colnames(ilo_wide)
# assume that the year is
ilo_wide <- ilo_latest %>% group_by(country) %>% mutate(ilo_year = max(year)) %>%
ungroup() %>% pivot_wider(names_from = ind, values_from = value) %>%
replace_na(list(sp_cover_all=0))
View(ilo_wide)
# assume that the year is
ilo_wide <- ilo_latest %>% group_by(country) %>% mutate(ilo_year = max(year)) %>%
ungroup() %>% pivot_wider(names_from = ind, values_from = value) %>%
replace_na(list(sp_cover_all=0, sa_cover_vulnerable=0, sp_cover_poor = 0))
View(ilo_wide)
write_csv(ilo_wide, file.path(data_path, "Clean", "ilo_clean.csv"))
data_path <- "C:/Users/dougj/Dropbox/Covid Social Protection/Data"
write_csv(ilo_wide, file.path(data_path, "Clean", "ilo_clean.csv"))
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
# read in the ilo data and merge with that as well
ilo <- read_csv(file.path(data_path, "Clean", "ilo_clean.csv"))
merged2 <- merged %>% left_join(ilo)
View(merged2)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
View(merged2)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
glimpse(merged)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
source('~/code/notebooks/covid_sp/import findex, aspire, and ifc data.R', echo=TRUE)
map(ifc, getlabel)
map(ifc, get_label)
map_chr(ifc, get_label)
map_chr(merged, get_label)
attributes(merged$ifc_i_ATMs_pop)$label
get_label(ifc_i_branches_A1_pop)
attributes(merged$ifc_i_branches_A1_pop)
attributes(merged$ifc_i_branches_A2_pop)
attributes(merged$ifc_i_branches_A3B1a_pop)
attributes(merged$ifc_i_ATMs_pop)
attributes(merged$ifc_i_mob_agent_active_pop)
attributes(merged$ifc_i_nonbranch_A1_pop)
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
View(ilo_slim)
str_detect(indicator, "Poor persons") ~ "sp_cover_poor",
str_detect(indicator, "Population covered") ~ "sp_cover_all",
str_detect(indicator, "Vulnerable") ~ "sa_cover_vulnerable")) %>%
select(-indicator) %>%
mutate(value = value/100)
source('~/code/notebooks/covid_sp/import ilo stat data.R', echo=TRUE)
View(ilo_wide)
