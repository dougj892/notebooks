var_trans <- 3.02E-04	+ 0.002344102
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_quart_pers = (pers_rank > .75*n), top_quart_y = (y_rank > .75*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_quart_pers[df$top_quart_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_quart_y = (y_rank > (1-centile)**n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_quart_pers[df$top_quart_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_quart_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_quart_pers[df$top_quart_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_quart_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_quart_pers[df$top_quart_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5)) %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .25
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
trans = rnorm(n, mean = 0, sd = var_trans^.5))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
?rbeta
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers,
trans = rbeta(n, shape_trans, shape_trans)
df <- df %>%
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers,
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
rbeta(n, shape_trans, shape_trans)
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers,
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
df <- tibble(pers = rbeta(n, shape_pers, shape_pers,
trans = rbeta(n, shape_trans, shape_trans))
library(tidyverse)
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
shape_pers <- (1/(4*var_pers))-.5
shape_trans <- (1/(4*var_trans))-.5
df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
trans = rbeta(n, shape_trans, shape_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
2*var_pers/(var_pers-1)
var_pers/var_trans
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
# shape_pers <- (1/(4*var_pers))-.5
# shape_trans <- (1/(4*var_trans))-.5
# df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
#              trans = rbeta(n, shape_trans, shape_trans))
# with the t distribution
#
df_pers <- 3
df_trans <- 4
df <- tibble(pers = rbeta(n, df_pers),
trans = rbeta(n, df_trans))
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
# shape_pers <- (1/(4*var_pers))-.5
# shape_trans <- (1/(4*var_trans))-.5
# df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
#              trans = rbeta(n, shape_trans, shape_trans))
# with the t distribution
#
df_pers <- 3
df_trans <- 4
df <- tibble(pers = rt(n, df_pers),
trans = rt(n, df_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
library(tidyverse)
# Inputs -- using state reading changes for now
n <- 100000
var_pers <- 0.004025697
var_trans <- 3.02E-04	+ 0.002344102
centile <- .1
# with normal distribution
# df <- tibble(pers = rnorm(n, mean = 0, sd = var_pers^.5),
#              trans = rnorm(n, mean = 0, sd = var_trans^.5))
# with beta distribution
# note that if mean = .5 then shape1 =  shape2 with the beta
# shape_pers <- (1/(4*var_pers))-.5
# shape_trans <- (1/(4*var_trans))-.5
# df <- tibble(pers = rbeta(n, shape_pers, shape_pers),
#              trans = rbeta(n, shape_trans, shape_trans))
# with the t distribution
#
df_pers <- 3
df_trans <- 4
df <- tibble(pers = rt(n, df_pers),
trans = rt(n, df_trans))
df <- df %>%
mutate(y = pers +trans)
df$y_rank[order(df$y)] <- 1:nrow(df)
df$pers_rank[order(df$pers)] <- 1:nrow(df)
df <- df %>%
mutate(top_cent_pers = (pers_rank > (1-centile)*n), top_cent_y = (y_rank > (1-centile)*n))
# Proportion of those ranking in the top which should be ranking in top quartile
mean(df$top_cent_pers[df$top_cent_y])
